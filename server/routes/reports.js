const router = require('express').Router();
const { authMiddleware } = require('../middleware/auth');
const bot = require('../bot');

const ADMIN_GROUP_ID = -4818184433; // ID –≥—Ä—É–ø–ø—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤

// –°–æ–∑–¥–∞—Ç—å –∂–∞–ª–æ–±—É
router.post('/', authMiddleware, async (req, res) => {
  try {
    const { type, target_username, deal_id, description } = req.body;
    const reporter = req.user;
    
    if (!type || !description) {
      return res.status(400).json({ error: 'Type and description are required' });
    }
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –≥—Ä—É–ø–ø—É
    let message = `üö® <b>–ù–û–í–ê–Ø –ñ–ê–õ–û–ë–ê</b>\n\n`;
    message += `<b>–û—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</b> @${reporter.username} (ID: ${reporter.telegram_id})\n`;
    message += `<b>–¢–∏–ø –∂–∞–ª–æ–±—ã:</b> ${getReportTypeText(type)}\n`;
    
    if (type === 'user' && target_username) {
      message += `<b>–ù–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</b> ${target_username}\n`;
    }
    
    if (type === 'deal' && deal_id) {
      message += `<b>ID —Å–¥–µ–ª–∫–∏:</b> ${deal_id}\n`;
    }
    
    message += `\n<b>–û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã:</b>\n${description}\n`;
    message += `\n<b>–í—Ä–µ–º—è:</b> ${new Date().toLocaleString('ru-RU', { timeZone: 'Europe/Moscow' })}`;
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
    try {
      await bot.telegram.sendMessage(ADMIN_GROUP_ID, message, {
        parse_mode: 'HTML'
      });
      
      console.log('Report sent to admin group:', {
        type,
        reporter: reporter.username,
        target_username,
        deal_id
      });
      
      res.json({ 
        success: true, 
        message: 'Report submitted successfully' 
      });
    } catch (botError) {
      console.error('Failed to send report to Telegram:', botError);
      
      // –î–∞–∂–µ –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ Telegram, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—Ö
      // —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥—É–º–∞–ª, —á—Ç–æ –∂–∞–ª–æ–±–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞
      res.json({ 
        success: true, 
        message: 'Report submitted successfully' 
      });
    }
  } catch (error) {
    console.error('Create report error:', error);
    res.status(500).json({ error: 'Failed to submit report' });
  }
});

// –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∂–∞–ª–æ–± (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
router.get('/stats', authMiddleware, async (req, res) => {
  try {
    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ –∞–¥–º–∏–Ω–∞
    // if (!req.user.is_admin) {
    //   return res.status(403).json({ error: 'Admin access required' });
    // }
    
    res.json({
      message: 'Reports statistics endpoint',
      total_reports: 0 // Placeholder
    });
  } catch (error) {
    console.error('Get reports stats error:', error);
    res.status(500).json({ error: 'Failed to get reports stats' });
  }
});

function getReportTypeText(type) {
  const types = {
    'user': 'üë§ –ñ–∞–ª–æ–±–∞ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
    'deal': 'ü§ù –ñ–∞–ª–æ–±–∞ –Ω–∞ —Å–¥–µ–ª–∫—É',
    'review': '‚≠ê –ñ–∞–ª–æ–±–∞ –Ω–∞ –æ—Ç–∑—ã–≤',
    'other': '‚ùì –î—Ä—É–≥–æ–µ'
  };
  return types[type] || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø';
}

module.exports = router;