const axios = require('axios');
const { User } = require('../db');

const BOT_TOKEN = process.env.BOT_TOKEN || '8200049903:AAETV6_6XOLA6SP-jaW2Hizsm5hVjv_p5CY';
const TELEGRAM_API = `https://api.telegram.org/bot${BOT_TOKEN}`;

// –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ Telegram
async function sendTelegramNotification(telegramId, message, keyboard = null) {
  try {
    const params = {
      chat_id: telegramId,
      text: message,
      parse_mode: 'HTML'
    };

    if (keyboard) {
      params.reply_markup = JSON.stringify(keyboard);
    }

    const response = await axios.post(`${TELEGRAM_API}/sendMessage`, params);
    return response.data;
  } catch (error) {
    console.error('Error sending Telegram notification:', error.response?.data || error);
    return null;
  }
}

// –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–∏ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
async function notifyNewOffer(offer) {
  try {
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫—Ä–æ–º–µ —Å–æ–∑–¥–∞—Ç–µ–ª—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
    const users = await User.find({ 
      _id: { $ne: offer.user_id },
      telegram_id: { $exists: true }
    }).select('telegram_id preferred_currencies').lean();

    const offerType = offer.type === 'buy' ? 'üíµ –ü–æ–∫—É–ø–∫–∞' : 'üí∞ –ü—Ä–æ–¥–∞–∂–∞';
    const message = `
<b>üî• –ù–æ–≤–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ!</b>

${offerType}
<b>${offer.amount_from} ${offer.currency_from} ‚Üí ${offer.amount_to} ${offer.currency_to}</b>
–ö—É—Ä—Å: ${offer.rate} ${offer.currency_to}/${offer.currency_from}
üìç ${offer.district}

<b>–û—Ç:</b> ${offer.user_id?.first_name || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}
‚≠ê –†–µ–π—Ç–∏–Ω–≥: ${offer.user_id?.rating || 0} (${offer.user_id?.deals_count || 0} —Å–¥–µ–ª–æ–∫)

<i>–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ</i>
    `.trim();

    const keyboard = {
      inline_keyboard: [[
        {
          text: 'üì± –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ',
          web_app: {
            url: `${process.env.WEB_APP_URL || 'https://p2p-exchange-pmr.onrender.com'}/#/offers/${offer._id}`
          }
        }
      ]]
    };

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º, –∫–æ—Ç–æ—Ä—ã–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—Ç—Å—è —ç—Ç–∏–º–∏ –≤–∞–ª—é—Ç–∞–º–∏
    const notifications = users
      .filter(user => {
        // –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ
        if (!user.preferred_currencies || user.preferred_currencies.length === 0) {
          return true;
        }
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–Ω—Ç–µ—Ä–µ—Å—É—é—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —ç—Ç–∏ –≤–∞–ª—é—Ç—ã
        return user.preferred_currencies.includes(offer.currency_from) || 
               user.preferred_currencies.includes(offer.currency_to);
      })
      .map(user => sendTelegramNotification(user.telegram_id, message, keyboard));

    await Promise.allSettled(notifications);
    console.log(`Sent notifications for new offer to ${notifications.length} users`);
  } catch (error) {
    console.error('Error notifying users about new offer:', error);
  }
}

// –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–π —Å–¥–µ–ª–∫–µ
async function notifyNewDeal(deal, takerName) {
  try {
    const maker = await User.findById(deal.maker_id).select('telegram_id').lean();
    if (!maker?.telegram_id) return;

    const message = `
<b>ü§ù –£ –≤–∞—Å –Ω–æ–≤–∞—è —Å–¥–µ–ª–∫–∞!</b>

<b>–°—É–º–º–∞:</b> ${deal.amount}
<b>–û—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</b> ${takerName}

<i>–û—Ç–∫—Ä–æ–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –¥–µ—Ç–∞–ª–µ–π</i>
    `.trim();

    const keyboard = {
      inline_keyboard: [[
        {
          text: 'üì± –û—Ç–∫—Ä—ã—Ç—å —Å–¥–µ–ª–∫—É',
          web_app: {
            url: `${process.env.WEB_APP_URL || 'https://p2p-exchange-pmr.onrender.com'}/#/deals/${deal._id}`
          }
        }
      ]]
    };

    await sendTelegramNotification(maker.telegram_id, message, keyboard);
  } catch (error) {
    console.error('Error notifying about new deal:', error);
  }
}

// –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ —Å–¥–µ–ª–∫–∏
async function notifyDealStatusChange(dealId, status, userId) {
  try {
    const statusText = {
      accepted: '‚úÖ –ø—Ä–∏–Ω—è—Ç–∞',
      completed: 'üéâ –∑–∞–≤–µ—Ä—à–µ–Ω–∞',
      cancelled: '‚ùå –æ—Ç–º–µ–Ω–µ–Ω–∞',
      disputed: '‚ö†Ô∏è –æ—Å–ø–æ—Ä–µ–Ω–∞'
    };

    const message = `
<b>üìä –°—Ç–∞—Ç—É—Å –≤–∞—à–µ–π —Å–¥–µ–ª–∫–∏ –∏–∑–º–µ–Ω–µ–Ω</b>

–ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å: <b>${statusText[status] || status}</b>

<i>–û—Ç–∫—Ä–æ–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –¥–µ—Ç–∞–ª–µ–π</i>
    `.trim();

    const keyboard = {
      inline_keyboard: [[
        {
          text: 'üì± –û—Ç–∫—Ä—ã—Ç—å —Å–¥–µ–ª–∫—É',
          web_app: {
            url: `${process.env.WEB_APP_URL || 'https://p2p-exchange-pmr.onrender.com'}/#/deals/${dealId}`
          }
        }
      ]]
    };

    const user = await User.findById(userId).select('telegram_id').lean();
    if (user?.telegram_id) {
      await sendTelegramNotification(user.telegram_id, message, keyboard);
    }
  } catch (error) {
    console.error('Error notifying about deal status change:', error);
  }
}

// –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º –æ—Ç–∑—ã–≤–µ
async function notifyNewReview(review) {
  try {
    const user = await User.findById(review.to_user_id).select('telegram_id').lean();
    if (!user?.telegram_id) return;

    const stars = '‚≠ê'.repeat(review.rating);
    const message = `
<b>üìù –£ –≤–∞—Å –Ω–æ–≤—ã–π –æ—Ç–∑—ã–≤!</b>

<b>–†–µ–π—Ç–∏–Ω–≥:</b> ${stars}
<b>–û—Ç:</b> ${review.from_user_id?.first_name || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}
${review.comment ? `<b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</b> ${review.comment}` : ''}

<i>–í–∞—à –æ–±—â–∏–π —Ä–µ–π—Ç–∏–Ω–≥ –æ–±–Ω–æ–≤–ª–µ–Ω</i>
    `.trim();

    const keyboard = {
      inline_keyboard: [[
        {
          text: 'üì± –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–æ—Ñ–∏–ª—å',
          web_app: {
            url: `${process.env.WEB_APP_URL || 'https://p2p-exchange-pmr.onrender.com'}/#/profile`
          }
        }
      ]]
    };

    await sendTelegramNotification(user.telegram_id, message, keyboard);
  } catch (error) {
    console.error('Error notifying about new review:', error);
  }
}

module.exports = {
  sendTelegramNotification,
  notifyNewOffer,
  notifyNewDeal,
  notifyDealStatusChange,
  notifyNewReview
};